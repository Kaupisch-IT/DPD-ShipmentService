//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Schema;
using System.Xml.Serialization;

// 
// Dieser Quellcode wurde automatisch generiert von wsdl, Version=4.8.3928.0.
// 


/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[DebuggerStepThrough()]
[DesignerCategory("code")]
[WebServiceBinding(Name="LoginService_2_0_SOAP", Namespace="http://dpd.com/common/service/LoginService/2.0")]
[XmlRoot("LoginServicePublic_2_0")]
public partial class LoginServicePublic_2_0 : SoapHttpClientProtocol {
    
    private SendOrPostCallback getAuthOperationCompleted;
    
    /// <remarks/>
    public LoginServicePublic_2_0() {
        this.Url = "https://public-ws-stage.dpd.com/services/LoginService/V2_0/";
    }
    
    /// <remarks/>
    public event getAuthCompletedEventHandler getAuthCompleted;
    
    /// <summary>
    /// Creates an authentication token for the committed user if user name and password are valid.
    /// The authentication token is needed for accessing other DPD Web Services.
    /// 
    /// Sample request:
    /// 
    /// SOAP:
    /// &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;
    /// 	xmlns:ns=&quot;http://dpd.com/common/service/types/LoginService/2.0&quot;&gt;
    ///    &lt;soapenv:Header/&gt;
    ///    &lt;soapenv:Body&gt;
    ///        &lt;ns:getAuth&gt;
    ///            &lt;delisId&gt;&lt;your delisId&gt;&lt;/delisId&gt;
    ///            &lt;password&gt;&lt;your password&gt;&lt;/password&gt;
    ///            &lt;messageLanguage&gt;de_DE&lt;/messageLanguage&gt;
    ///        &lt;/ns:getAuth&gt;
    ///    &lt;/soapenv:Body&gt;
    /// &lt;soapenv:Envelope&gt;
    /// 
    /// REST:
    /// URL: &lt;server:port&gt;&lt;path&gt;/LoginService/V2_0/getAuth
    /// JSON-Data for POST-Request (for GET-Request data must send with parameter &quot;request&quot; and for
    /// JSONP the Parameter &quot;jsonpcallback&quot; can be used, to send a padding function name):
    /// 
    /// {
    ///  &quot;delisId&quot; : &quot;&lt;your delisId&gt;&quot;,
    ///  &quot;password&quot;: &quot;&lt;your password&gt;&quot;,
    ///  &quot;messageLanguage&quot;:&quot;en_EN&quot;
    /// }
    /// 
    /// REST-Result, without error:
    /// 
    /// {
    ///    &quot;getAuthResponse&quot;: {&quot;return&quot;:    {
    ///       &quot;delisId&quot;: &quot;&lt;your delisId&gt;&quot;,
    ///       &quot;customerUid&quot;: &quot;&lt;your customerUid&gt;&quot;,
    ///       &quot;authToken&quot;: &quot;&lt;your authentication token&gt;&quot;,
    ///       &quot;depot&quot;: &quot;&lt;your customerUid&gt;&quot;
    ///    }},
    ///    &quot;status&quot;:    {
    ///       &quot;type&quot;: &quot;OK&quot;,
    ///       &quot;code&quot;: &quot;200&quot;,
    ///       &quot;message&quot;: &quot;valid&quot;
    ///    }
    /// }
    /// 
    /// REST-Result, if an error occurred:
    /// 
    /// {&quot;status&quot;: {
    ///    &quot;type&quot;: &quot;AuthenticationFault&quot;,
    ///    &quot;code&quot;: &quot;&lt;Error code, e.g. LOGIN_8&gt;&quot;,
    ///    &quot;message&quot;: &quot;&lt;Error message, e.g. The combination of user and password is invalid.&gt;&quot;
    /// }}
    /// 
    /// Additional REST-State on system error:
    /// Error-Code: 100
    /// Error-Type: SystemFault
    /// Error-Message: &lt;Message, which describe the error&gt;
    /// </summary>
    [SoapDocumentMethod("http://dpd.com/common/service/LoginService/2.0/getAuth", RequestNamespace="http://dpd.com/common/service/types/LoginService/2.0", ResponseNamespace="http://dpd.com/common/service/types/LoginService/2.0", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped, RequestElementName = "getAuth", ResponseElementName = "getAuthResponse")]
    [return: XmlElement("return", Form=XmlSchemaForm.Unqualified)]
    public Login GetAuth([XmlElement(Form=XmlSchemaForm.Unqualified)] string delisId, [XmlElement(Form=XmlSchemaForm.Unqualified)] string password, [XmlElement(Form=XmlSchemaForm.Unqualified)] string messageLanguage) {
        object[] results = this.Invoke(nameof(GetAuth), new object[] {
                    delisId,
                    password,
                    messageLanguage});
        return ((Login)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginGetAuth(string delisId, string password, string messageLanguage, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke(nameof(GetAuth), new object[] {
                    delisId,
                    password,
                    messageLanguage}, callback, asyncState);
    }
    
    /// <remarks/>
    public Login EndGetAuth(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Login)(results[0]));
    }
    
    /// <remarks/>
    public void GetAuthAsync(string delisId, string password, string messageLanguage) {
        this.GetAuthAsync(delisId, password, messageLanguage, null);
    }
    
    /// <remarks/>
    public void GetAuthAsync(string delisId, string password, string messageLanguage, object userState) {
        if ((this.getAuthOperationCompleted == null)) {
            this.getAuthOperationCompleted = new SendOrPostCallback(this.OngetAuthOperationCompleted);
        }
        this.InvokeAsync(nameof(GetAuth), new object[] {
                    delisId,
                    password,
                    messageLanguage}, this.getAuthOperationCompleted, userState);
    }
    
    private void OngetAuthOperationCompleted(object arg) {
        if ((this.getAuthCompleted != null)) {
            InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
            this.getAuthCompleted(this, new GetAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <summary> Is created when a user logs in and contains its login information. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable()]
[DebuggerStepThrough()]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/LoginService/2.0")]
[XmlRoot("Login")]
public partial class Login {
    
    /// <summary> The user&#39;s DELIS-Id. </summary>
    [XmlElement("delisId", Form=XmlSchemaForm.Unqualified)]
    public string DelisId { get; set; }
    
    /// <summary> The user&#39;s customer uid. This is needed for subaccounts, usually this is equal to DELIS-Id </summary>
    [XmlElement("customerUid", Form=XmlSchemaForm.Unqualified)]
    public string CustomerUid { get; set; }
    
    /// <summary> The Authtoken, needed for other web service calls. </summary>
    [XmlElement("authToken", Form=XmlSchemaForm.Unqualified)]
    public string AuthToken { get; set; }
    
    /// <summary> The depot, to which the user is assigned. </summary>
    [XmlElement("depot", Form=XmlSchemaForm.Unqualified)]
    public string Depot { get; set; }
}

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
public delegate void getAuthCompletedEventHandler(object sender, GetAuthCompletedEventArgs e);

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[DebuggerStepThrough()]
[DesignerCategory("code")]
[XmlRoot("getAuthCompletedEventArgs")]
public partial class GetAuthCompletedEventArgs : AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAuthCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public Login Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Login)(this.results[0]));
        }
    }
}

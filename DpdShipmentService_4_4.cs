//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Schema;
using System.Xml.Serialization;

// 
// Dieser Quellcode wurde automatisch generiert von wsdl, Version=4.8.3928.0.
// 


/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[DebuggerStepThrough]
[DesignerCategory("code")]
[WebServiceBinding(Name="ShipmentService-Public_4_4_SOAP", Namespace="http://dpd.com/common/service/ShipmentService/4.4")]
[XmlRoot("ShipmentServicePublic_4_4")]
public partial class ShipmentServicePublic_4_4 : SoapHttpClientProtocol {
    
    private SendOrPostCallback storeOrdersOperationCompleted;
    
    /// <remarks/>
    public ShipmentServicePublic_4_4() {
        this.Url = "https://public-ws-stage.dpd.com/services/ShipmentService/V4_4/";
    }
    
    public Authentication AuthenticationValue { get; set; }
    
    /// <remarks/>
    public event storeOrdersCompletedEventHandler storeOrdersCompleted;
    
    /// <summary>
    /// Stores up to 30 shipments and creates corresponding shipment documents.
    /// 
    /// Sample request:
    /// &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://dpd.com/common/service/types/Authentication/2.0&quot; xmlns:ns1=&quot;http://dpd.com/common/service/types/ShipmentService/4.4&quot;&gt;
    ///    &lt;soapenv:Header&gt;
    ///       &lt;ns:authentication&gt;
    ///          &lt;delisId&gt;&lt;your delisId&gt;&lt;/delisId&gt;
    ///          &lt;authToken&gt;&lt;your authToken&gt;&lt;/authToken&gt;
    ///          &lt;messageLanguage&gt;de_DE&lt;/messageLanguage&gt;
    ///       &lt;/ns:authentication&gt;
    ///    &lt;/soapenv:Header&gt;
    ///    &lt;soapenv:Body&gt;
    ///       &lt;ns1:storeOrders&gt;
    ///          &lt;printOptions&gt;
    ///             &lt;printOption&gt;
    ///                &lt;outputFormat&gt;PDF&lt;/outputFormat&gt;
    ///                &lt;paperFormat&gt;A4&lt;/paperFormat&gt;
    ///             &lt;/printOption&gt;
    ///          &lt;/printOptions&gt;
    ///          &lt;order&gt;
    ///             &lt;generalShipmentData&gt;
    ///                 &lt;identificationNumber&gt;77777&lt;/identificationNumber&gt;
    ///                	&lt;sendingDepot&gt;0163&lt;/sendingDepot&gt;
    ///                	&lt;product&gt;CL&lt;/product&gt;
    ///                	&lt;mpsCompleteDelivery&gt;0&lt;/mpsCompleteDelivery&gt;
    ///                	&lt;sender&gt;
    /// 	               &lt;name1&gt;Abholer1&lt;/name1&gt;
    /// 	               &lt;street&gt;Strasse 1&lt;/street&gt;
    /// 	               &lt;country&gt;DE&lt;/country&gt;
    /// 	               &lt;zipCode&gt;11111&lt;/zipCode&gt;
    /// 	               &lt;city&gt;Ort1&lt;/city&gt;
    /// 	               &lt;customerNumber&gt;12345679&lt;/customerNumber&gt;
    ///                	&lt;/sender&gt;
    ///                	&lt;recipient&gt;
    /// 	               &lt;name1&gt;Test-Empfaenger&lt;/name1&gt;
    /// 	               &lt;street&gt;Test-Strasse&lt;/street&gt;
    /// 	               &lt;state&gt;BY&lt;/state&gt;
    /// 	               &lt;country&gt;DE&lt;/country&gt;
    /// 	               &lt;zipCode&gt;63741&lt;/zipCode&gt;
    /// 	               &lt;city&gt;Aschaffenburg&lt;/city&gt;
    ///                	&lt;/recipient&gt;
    ///             &lt;/generalShipmentData&gt;
    ///            	&lt;parcels&gt;
    ///                &lt;parcelLabelNumber&gt;&lt;your parcelLabelNumber&gt;&lt;/parcelLabelNumber&gt;
    ///            	&lt;/parcels&gt;
    ///            	&lt;productAndServiceData&gt;
    ///                &lt;orderType&gt;consignment&lt;/orderType&gt;
    ///            	&lt;/productAndServiceData&gt;
    ///          &lt;/order&gt;
    ///       &lt;/ns1:storeOrders&gt;
    ///    &lt;/soapenv:Body&gt;
    /// &lt;/soapenv:Envelope&gt;
    /// </summary>
    [SoapHeader("AuthenticationValue")]
    [SoapDocumentMethod("http://dpd.com/common/service/ShipmentService/4.4/storeOrders", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Bare, RequestElementName = "storeOrders", ResponseElementName = "storeOrdersResponse")]
    [return: XmlElement("storeOrdersResponse", Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
    public StoreOrdersResponse StoreOrders([XmlElement("storeOrders", Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")] StoreOrders storeOrders1) {
        object[] results = this.Invoke(nameof(StoreOrders), new object[] {
                    storeOrders1});
        return ((StoreOrdersResponse)(results[0]));
    }
    
    /// <remarks/>
    public IAsyncResult BeginStoreOrders(StoreOrders storeOrders1, AsyncCallback callback, object asyncState) {
        return this.BeginInvoke(nameof(StoreOrders), new object[] {
                    storeOrders1}, callback, asyncState);
    }
    
    /// <remarks/>
    public StoreOrdersResponse EndStoreOrders(IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((StoreOrdersResponse)(results[0]));
    }
    
    /// <remarks/>
    public void StoreOrdersAsync(StoreOrders storeOrders1) {
        this.StoreOrdersAsync(storeOrders1, null);
    }
    
    /// <remarks/>
    public void StoreOrdersAsync(StoreOrders storeOrders1, object userState) {
        if ((this.storeOrdersOperationCompleted == null)) {
            this.storeOrdersOperationCompleted = new SendOrPostCallback(this.OnstoreOrdersOperationCompleted);
        }
        this.InvokeAsync(nameof(StoreOrders), new object[] {
                    storeOrders1}, this.storeOrdersOperationCompleted, userState);
    }
    
    private void OnstoreOrdersOperationCompleted(object arg) {
        if ((this.storeOrdersCompleted != null)) {
            InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs)(arg));
            this.storeOrdersCompleted(this, new StoreOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <summary> The data structure for authentication data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(AnonymousType=true, Namespace="http://dpd.com/common/service/types/Authentication/2.0")]
[XmlRoot("authentication", Namespace="http://dpd.com/common/service/types/Authentication/2.0", IsNullable=false)]
public partial class Authentication : SoapHeader {
    
    /// <summary> The delis user id for authentication. </summary>
    [XmlElement("delisId", Form=XmlSchemaForm.Unqualified)]
    public string DelisId { get; set; }
    
    /// <summary>
    /// The token for authentication. Field authToken of Login, as a result of
    /// Method &quot;getAuth&quot; of LoginService.
    /// </summary>
    [XmlElement("authToken", Form=XmlSchemaForm.Unqualified)]
    public string AuthToken { get; set; }
    
    /// <summary>
    /// The language (Java format) for messages.
    /// &quot;de_DE&quot; for german messages.
    /// &quot;en_US&quot; for english messages.
    /// </summary>
    [XmlElement("messageLanguage", Form=XmlSchemaForm.Unqualified)]
    public string MessageLanguage { get; set; }
}

/// <summary> Bundles fault code type data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("faultCodeType")]
public partial class FaultCodeType {
    
    /// <summary>
    /// Possible error codes are:
    /// SHIPPING_1 - Pickup address is unknown for customer,
    /// SHIPPING_2 - Parcel label print fails,
    /// COMMON_1 - Unexpected runtime error,
    /// COMMON_2 - Mandatory input field is empty,
    /// COMMON_3 - Length of data for field does not fit,
    /// COMMON_4 - Input data contains invalid special character,
    /// COMMON_5 - A swap parcel is ordered, but there is more than one parcel,
    /// COMMON_6 - Some input data field values result in an invalid combination,
    /// COMMON_7 - Input data contains invalid value,
    /// COMMON_8 - A field is to be stored in database, but there is not database field mapped for it,
    /// DATABASE_6 - Transfer state of order is to be changed but order is already committed,
    /// DATABASE_7 - Update fails on database level during order storing,
    /// DATABASE_8 - Delete fails on database level during rollback after some other error,
    /// DATABASE_21 - Order is to be inserted in databse, but has already a database id,
    /// DATABASE_22 - Order is to be committed after inserting, but there is no database id for update given,
    /// DATABASE_24 - Feletion is necessary because of some other error, but no database id for record is given,
    /// MPSEXP_1 - Parcel label number is already in use,
    /// ROUTING_1 - No route could be found for depot and feature,
    /// ROUTING_2 - Invalid input data,
    /// ROUTING_3 - The connection to the database failed,
    /// ROUTING_4 - An internal failure occurs,
    /// ROUTING_5 - No depot could be found,
    /// ROUTING_6 - No pickup date was given,
    /// ROUTING_7 - Internal extension rule error,
    /// ROUTING_8 - Malformed zip code,
    /// ROUTING_9 - Missing country code,
    /// ROUTING_10 - Missing routing place,
    /// ROUTING_11 - Missing service code,
    /// ROUTING_12 - Routing place error,
    /// ROUTING_13 - Sending date error,
    /// ROUTING_14 - Service code error,
    /// ROUTING_15 - Invalid relation of service codes,
    /// ROUTING_16 - Unknown country code,
    /// ROUTING_17 - Unknown destination depot,
    /// ROUTING_18 - Unknown zip code,
    /// ROUTING_19 - Unknown routing place,
    /// ROUTING_20 - Unknown service code,
    /// ROUTING_21 - Invalid service code,
    /// ROUTING_21 - Parcel is labelled as return parcel but returns is not possible,
    /// ROUTING_22 - Missing allow,
    /// ROUTING_23 - Missing routing place or destination depot.
    /// </summary>
    [XmlElement("faultCode", Form=XmlSchemaForm.Unqualified)]
    public string FaultCode { get; set; }
    
    /// <summary> Message with detailed information for the fault (e.g. incorrect field). </summary>
    [XmlElement("message", Form=XmlSchemaForm.Unqualified)]
    public string Message { get; set; }
}

/// <summary> Bundles parcel information type data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("parcelInformationType")]
public partial class ParcelInformationType {
    
    /// <summary> The parcel label number of the corresponding parcel. </summary>
    [XmlElement("parcelLabelNumber", Form=XmlSchemaForm.Unqualified)]
    public string ParcelLabelNumber { get; set; }
    
    /// <summary> The DPD reference for this parcel. </summary>
    [XmlElement("dpdReference", Form=XmlSchemaForm.Unqualified)]
    public string DpdReference { get; set; }
    
    /// <summary> The content for the parcel. </summary>
    [XmlElement("output", Form=XmlSchemaForm.Unqualified)]
    public OutputType[] Output { get; set; }
}

/// <summary> Contains the output data, e.g. parcel labels. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("OutputType")]
public partial class OutputType {
    
    /// <summary> The type of the output data. </summary>
    [XmlElement("format", Form=XmlSchemaForm.Unqualified)]
    public OutputFormatType Format { get; set; }
    
    /// <summary> The output data </summary>
    [XmlElement("content", Form=XmlSchemaForm.Unqualified, DataType="base64Binary")]
    public byte[] Content { get; set; }
}

/// <summary>
/// Content of output format.
/// Supported types are:
/// PDF,
/// ZPL,
/// DPL,
/// PDL,
/// BARCODE_IMAGE,
/// MULTIPAGE_IMAGE.
/// </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("OutputFormatType")]
public enum OutputFormatType {
    
    /// <remarks/>
    [XmlEnum("PDF")]
    PDF,
    
    /// <remarks/>
    [XmlEnum("ZPL")]
    ZPL,
    
    /// <remarks/>
    [XmlEnum("DPL")]
    DPL,
    
    /// <remarks/>
    [XmlEnum("PDL")]
    PDL,
    
    /// <remarks/>
    [XmlEnum("BARCODE_IMAGE")]
    BARCODE_IMAGE,
    
    /// <remarks/>
    [XmlEnum("MULTIPAGE_IMAGE")]
    MULTIPAGE_IMAGE,
}

/// <summary> Bundles shipment response data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("shipmentResponse")]
public partial class ShipmentResponse {
    
    /// <summary> Serves as unique alphanumeric key of the shipment used by customer. </summary>
    [XmlElement("identificationNumber", Form=XmlSchemaForm.Unqualified)]
    public string IdentificationNumber { get; set; }
    
    /// <summary> The shipment number for consignment data. If ordertype is pickup information, the shipment number is an internal database id, which is necessary for technical support requests at DPD. </summary>
    [XmlElement("mpsId", Form=XmlSchemaForm.Unqualified)]
    public string MpsId { get; set; }
    
    /// <summary> Contains information about the single parcels. </summary>
    [XmlElement("parcelInformation", Form=XmlSchemaForm.Unqualified)]
    public ParcelInformationType[] ParcelInformation { get; set; }
    
    /// <summary> Contains information about errors during shipment order processing. </summary>
    [XmlElement("faults", Form=XmlSchemaForm.Unqualified)]
    public FaultCodeType[] Faults { get; set; }
}

/// <summary> Bundles storeOrders response data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("storeOrdersResponseType")]
public partial class StoreOrdersResponseType {
    
    /// <summary> Contains parcel label data in bytes. </summary>
    [XmlElement("output", Form=XmlSchemaForm.Unqualified)]
    public OutputType Output { get; set; }
    
    /// <summary> Contains response data for every shipment order. </summary>
    [XmlElement("shipmentResponses", Form=XmlSchemaForm.Unqualified)]
    public ShipmentResponse[] ShipmentResponses { get; set; }
}

/// <summary> Contains return object. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("storeOrdersResponse")]
public partial class StoreOrdersResponse {
    
    /// <summary> Contains return object. </summary>
    [XmlElement("orderResult", Form=XmlSchemaForm.Unqualified)]
    public StoreOrdersResponseType OrderResult { get; set; }
}

/// <summary> Bundles information about an invoice position for international parcels. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("additionalInvoiceLine")]
public partial class AdditionalInvoiceLine {
    
    /// <summary> Number of invoice position. </summary>
    [XmlElement("customsInvoicePosition", Form=XmlSchemaForm.Unqualified)]
    public int? CustomsInvoicePosition { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool CustomsInvoicePositionSpecified => this.CustomsInvoicePosition.HasValue;
    
    /// <summary> Number of items. </summary>
    [XmlElement("quantityItems", Form=XmlSchemaForm.Unqualified)]
    public int? QuantityItems { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool QuantityItemsSpecified => this.QuantityItems.HasValue;
    
    /// <summary> Content. </summary>
    [XmlElement("customsContent", Form=XmlSchemaForm.Unqualified)]
    public string CustomsContent { get; set; }
    
    /// <summary> Customs tarif number. </summary>
    [XmlElement("customsTarif", Form=XmlSchemaForm.Unqualified)]
    public string CustomsTarif { get; set; }
    
    /// <summary> Value of invoice position (in invoice currency) with two decimal digits without separator. </summary>
    [XmlElement("customsAmountLine", Form=XmlSchemaForm.Unqualified)]
    public long? CustomsAmountLine { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool CustomsAmountLineSpecified => this.CustomsAmountLine.HasValue;
    
    /// <summary> Country of invoice origin (ISO 3166). </summary>
    [XmlElement("customsOrigin", Form=XmlSchemaForm.Unqualified)]
    public int? CustomsOrigin { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool CustomsOriginSpecified => this.CustomsOrigin.HasValue;
    
    /// <summary> Parcel net weight in gramm rounded in 10 gramm units without decimal delimiter (e.g. 300 equals 3kg). </summary>
    [XmlElement("customsNetWeight", Form=XmlSchemaForm.Unqualified)]
    public int? CustomsNetWeight { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool CustomsNetWeightSpecified => this.CustomsNetWeight.HasValue;
    
    /// <summary> Parcel gross weight in gramm rounded in 10 gramm units without decimal delimiter (e.g. 300 equals 3kg). </summary>
    [XmlElement("customsGrossWeight", Form=XmlSchemaForm.Unqualified)]
    public int? CustomsGrossWeight { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool CustomsGrossWeightSpecified => this.CustomsGrossWeight.HasValue;
    
    /// <summary> Description of fabric composition (for DPD DIRECT Servicecode 370). </summary>
    [XmlElement("productFabricComposition", Form=XmlSchemaForm.Unqualified)]
    public string ProductFabricComposition { get; set; }
    
    /// <summary> Internal customer product code (for DPD DIRECT Servicecode 370). </summary>
    [XmlElement("productCode", Form=XmlSchemaForm.Unqualified)]
    public string ProductCode { get; set; }
    
    /// <summary> Short description of the product (for DPD DIRECT Servicecode 370). </summary>
    [XmlElement("productShortDescription", Form=XmlSchemaForm.Unqualified)]
    public string ProductShortDescription { get; set; }
}

/// <summary> Bundles express international data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("international")]
public partial class International {
    
    /// <summary> Specifies if the type of parcel is &quot;documents&quot; (allowed for air based destination only). Default value is false. </summary>
    [XmlElement("parcelType", Form=XmlSchemaForm.Unqualified)]
    public bool ParcelType { get; set; }
    
    /// <summary>
    /// Declared customs amount (in invoice currency) in total with two decimal digits without separator (e.g. 14.00 = 1400),
    /// for &quot;documents&quot; it is 0.
    /// </summary>
    [XmlElement("customsAmount", Form=XmlSchemaForm.Unqualified)]
    public long CustomsAmount { get; set; }
    
    /// <summary> Invoice currency code in ISO 4217 alpha-3 format. </summary>
    [XmlElement("customsCurrency", Form=XmlSchemaForm.Unqualified)]
    public string CustomsCurrency { get; set; }
    
    /// <summary>
    /// Converted customs amount (in export currency) in total with two decimal digits without separator (14,00 = 1400),
    /// for &quot;documents&quot; it is set to 0.
    /// </summary>
    [XmlElement("customsAmountExport", Form=XmlSchemaForm.Unqualified)]
    public long? CustomsAmountExport { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool CustomsAmountExportSpecified => this.CustomsAmountExport.HasValue;
    
    /// <summary> Export currency code in ISO 4217 alpha-3 format. </summary>
    [XmlElement("customsCurrencyExport", Form=XmlSchemaForm.Unqualified)]
    public string CustomsCurrencyExport { get; set; }
    
    /// <summary>
    /// Declares the customs terms.
    /// Possible values are:
    /// 01 = DAP, cleared,
    /// 02 = DDP, delivered duty paid (incl. duties and excl. taxes),
    /// 03 = DDP, delivered duty paid (incl. duties and taxes),
    /// 05 = ex works (EXW),
    /// 06 = DAP.
    /// </summary>
    [XmlElement("customsTerms", Form=XmlSchemaForm.Unqualified)]
    public InternationalCustomsTerms CustomsTerms { get; set; }
    
    /// <summary>
    /// Declares accompanying documents without separator (e.g. &quot;ABG&quot;), composed by following values:
    /// A = Commercial invoice,
    /// B = Pro forma invoice,
    /// C = Export declaration,
    /// D = EUR1,
    /// E = EUR2,
    /// F = ATR,
    /// G = Delivery note,
    /// H = Third party billing,
    /// I = T1 document.
    /// </summary>
    [XmlElement("customsPaper", Form=XmlSchemaForm.Unqualified)]
    public string CustomsPaper { get; set; }
    
    /// <summary> Specifies if the accompanying documents are at the parcel or not. Default value is false. </summary>
    [XmlElement("customsEnclosure", Form=XmlSchemaForm.Unqualified)]
    public bool? CustomsEnclosure { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool CustomsEnclosureSpecified => this.CustomsEnclosure.HasValue;
    
    /// <summary> Declares the invoice number. </summary>
    [XmlElement("customsInvoice", Form=XmlSchemaForm.Unqualified)]
    public string CustomsInvoice { get; set; }
    
    /// <summary> Declares the invoice date in format YYYYMMDD. </summary>
    [XmlElement("customsInvoiceDate", Form=XmlSchemaForm.Unqualified)]
    public int? CustomsInvoiceDate { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool CustomsInvoiceDateSpecified => this.CustomsInvoiceDate.HasValue;
    
    /// <summary> Origin country in ISO 3166-1 alpha-2 format (e.g. DE, EN). </summary>
    [XmlElement("customsOrigin", Form=XmlSchemaForm.Unqualified)]
    public string CustomsOrigin { get; set; }
    
    /// <summary> Central customs order number for collective customs clearance. </summary>
    [XmlElement("customsOrder", Form=XmlSchemaForm.Unqualified)]
    public string CustomsOrder { get; set; }
    
    /// <summary> Declares mode of line haul, possible values are &quot;AI&quot; for air or &quot;RO&quot; for road. </summary>
    [XmlElement("linehaul", Form=XmlSchemaForm.Unqualified)]
    public InternationalLinehaul? Linehaul { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool LinehaulSpecified => this.Linehaul.HasValue;
    
    /// <summary> Movement reference number of the electronical export declaration. </summary>
    [XmlElement("shipMrn", Form=XmlSchemaForm.Unqualified)]
    public string ShipMrn { get; set; }
    
    /// <summary> Flag for determining collective customs clearance. Default value is false. </summary>
    [XmlElement("collectiveCustomsClearance", Form=XmlSchemaForm.Unqualified)]
    public bool? CollectiveCustomsClearance { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool CollectiveCustomsClearanceSpecified => this.CollectiveCustomsClearance.HasValue;
    
    /// <summary> Declares the invoice position. </summary>
    [XmlElement("invoicePosition", Form=XmlSchemaForm.Unqualified)]
    public int? InvoicePosition { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool InvoicePositionSpecified => this.InvoicePosition.HasValue;
    
    /// <summary> Comment. </summary>
    [XmlElement("comment1", Form=XmlSchemaForm.Unqualified)]
    public string Comment1 { get; set; }
    
    /// <summary> Second comment. </summary>
    [XmlElement("comment2", Form=XmlSchemaForm.Unqualified)]
    public string Comment2 { get; set; }
    
    /// <summary> Real number of commodities. The number of additionalInvoiceLines must be equal to this value. </summary>
    [XmlElement("numberOfArticle", Form=XmlSchemaForm.Unqualified)]
    public int? NumberOfArticle { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool NumberOfArticleSpecified => this.NumberOfArticle.HasValue;
    
    /// <summary> Destination country registration information: Registration number or FDA. </summary>
    [XmlElement("countryRegistrationNumber", Form=XmlSchemaForm.Unqualified)]
    public string CountryRegistrationNumber { get; set; }
    
    /// <summary> Declares the commercial invoice consignee VAT number. </summary>
    [XmlElement("commercialInvoiceConsigneeVatNumber", Form=XmlSchemaForm.Unqualified)]
    public string CommercialInvoiceConsigneeVatNumber { get; set; }
    
    /// <summary> Contains address data of commercial invoice consignee. </summary>
    [XmlElement("commercialInvoiceConsignee", Form=XmlSchemaForm.Unqualified)]
    public AddressWithBusinessUnit CommercialInvoiceConsignee { get; set; }
    
    /// <summary> Declares the commercial invoice consignor VAT number. </summary>
    [XmlElement("commercialInvoiceConsignorVatNumber", Form=XmlSchemaForm.Unqualified)]
    public string CommercialInvoiceConsignorVatNumber { get; set; }
    
    /// <summary> Contains address data of commercial invoice consignor. </summary>
    [XmlElement("commercialInvoiceConsignor", Form=XmlSchemaForm.Unqualified)]
    public Address CommercialInvoiceConsignor { get; set; }
    
    /// <summary> Contains additional invoice lines. </summary>
    [XmlElement("additionalInvoiceLines", Form=XmlSchemaForm.Unqualified)]
    public AdditionalInvoiceLine[] AdditionalInvoiceLines { get; set; }
}

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[XmlType(AnonymousType=true, Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("internationalCustomsTerms")]
public enum InternationalCustomsTerms {
    
    /// <remarks/>
    [XmlEnum("01")]
    Item01,
    
    /// <remarks/>
    [XmlEnum("02")]
    Item02,
    
    /// <remarks/>
    [XmlEnum("03")]
    Item03,
    
    /// <remarks/>
    [XmlEnum("05")]
    Item05,
    
    /// <remarks/>
    [XmlEnum("06")]
    Item06,
    
    /// <remarks/>
    [XmlEnum("07")]
    Item07,
}

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[XmlType(AnonymousType=true, Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("internationalLinehaul")]
public enum InternationalLinehaul {
    
    /// <remarks/>
    [XmlEnum("AI")]
    AI,
    
    /// <remarks/>
    [XmlEnum("RO")]
    RO,
}

/// <summary> Bundles address data. </summary>
[XmlInclude(typeof(AddressWithType))]
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("addressWithBusinessUnit")]
public partial class AddressWithBusinessUnit : Address {
    
    /// <summary> Business unit of address owner. </summary>
    [XmlElement("businessUnit", Form=XmlSchemaForm.Unqualified)]
    public int? BusinessUnit { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool BusinessUnitSpecified => this.BusinessUnit.HasValue;
}

/// <summary> Bundles address data. </summary>
[XmlInclude(typeof(AddressWithBusinessUnit))]
[XmlInclude(typeof(AddressWithType))]
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("address")]
public partial class Address {
    
    /// <summary> Name of address owner. For dangerous goods the maximum length is 50, otherwise always 35. </summary>
    [XmlElement("name1", Form=XmlSchemaForm.Unqualified)]
    public string Name1 { get; set; }
    
    /// <summary> Second name of address owner. </summary>
    [XmlElement("name2", Form=XmlSchemaForm.Unqualified)]
    public string Name2 { get; set; }
    
    /// <summary> Street of address owner. For dangerous goods the maximum length is 50, otherwise always 35. </summary>
    [XmlElement("street", Form=XmlSchemaForm.Unqualified)]
    public string Street { get; set; }
    
    /// <summary> House number of address owner. </summary>
    [XmlElement("houseNo", Form=XmlSchemaForm.Unqualified)]
    public string HouseNo { get; set; }
    
    /// <summary> State of address owner in ISO 3166-2 code (e.g. BY = Bayern). </summary>
    [XmlElement("state", Form=XmlSchemaForm.Unqualified)]
    public string State { get; set; }
    
    /// <summary> Country of address owner in ISO 3166-1 alpha-2 format (e.g. &#39;DE&#39;). </summary>
    [XmlElement("country", Form=XmlSchemaForm.Unqualified)]
    public string Country { get; set; }
    
    /// <summary> Zip code of address owner. </summary>
    [XmlElement("zipCode", Form=XmlSchemaForm.Unqualified)]
    public string ZipCode { get; set; }
    
    /// <summary> City/town of address owner. For dangerous goods the maximum length is 50, otherwise always 35. </summary>
    [XmlElement("city", Form=XmlSchemaForm.Unqualified)]
    public string City { get; set; }
    
    /// <summary> International location number of address owner. </summary>
    [XmlElement("gln", Form=XmlSchemaForm.Unqualified)]
    public long? Gln { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool GlnSpecified => this.Gln.HasValue;
    
    /// <summary>
    /// Customer number of address owner. Maximum length is 17 for consignment and pickup information, 11 for collection request.
    /// Mandatory for sender&#39;s address.
    /// </summary>
    [XmlElement("customerNumber", Form=XmlSchemaForm.Unqualified)]
    public string CustomerNumber { get; set; }
    
    /// <summary> Contact person of address owner. </summary>
    [XmlElement("contact", Form=XmlSchemaForm.Unqualified)]
    public string Contact { get; set; }
    
    /// <summary>
    /// Phone number of address owner. Mandatory if phone is the chosen notification channel.
    /// If SMS notification is chosen, either mobile or phone must be filled.
    /// </summary>
    [XmlElement("phone", Form=XmlSchemaForm.Unqualified)]
    public string Phone { get; set; }
    
    /// <summary> Mobile phone number of address owner. If SMS notification is chosen, either mobile or phone must be filled. </summary>
    [XmlElement("mobile", Form=XmlSchemaForm.Unqualified)]
    public string Mobile { get; set; }
    
    /// <summary> Fax number of address owner. No required data format. </summary>
    [XmlElement("fax", Form=XmlSchemaForm.Unqualified)]
    public string Fax { get; set; }
    
    /// <summary> The email address including at minimum one &quot;@&quot; character as a delimiter between addresser and domain. The domain must include at minimum one &quot;.&quot; as a delimiter between domain-name and domain-country. </summary>
    [XmlElement("email", Form=XmlSchemaForm.Unqualified)]
    public string Email { get; set; }
    
    /// <summary> Comment on address owner. </summary>
    [XmlElement("comment", Form=XmlSchemaForm.Unqualified)]
    public string Comment { get; set; }
    
    /// <summary> Account allocation or cost center (for VTG) of invoice data for consignments. </summary>
    [XmlElement("iaccount", Form=XmlSchemaForm.Unqualified)]
    public string Iaccount { get; set; }
}

/// <summary> Bundles address data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("addressWithType")]
public partial class AddressWithType : AddressWithBusinessUnit {
    
    /// <summary>
    /// Address Type. Allowed values are:
    /// PRV: Private customer
    /// COM: Commercial customer
    /// </summary>
    [XmlElement("addressType", Form=XmlSchemaForm.Unqualified)]
    public AddressWithTypeAddressType? AddressType { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool AddressTypeSpecified => this.AddressType.HasValue;
}

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[XmlType(AnonymousType=true, Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("addressWithTypeAddressType")]
public enum AddressWithTypeAddressType {
    
    /// <remarks/>
    [XmlEnum("PRV")]
    PRV,
    
    /// <remarks/>
    [XmlEnum("COM")]
    COM,
}

/// <summary> Bundles delivery data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("delivery")]
public partial class Delivery {
    
    /// <summary>
    /// Allowed delivery days in the week (0 = Sunday, 1 = Monday etc.).
    /// Comma separated list of possible delivery days (e.g. &quot;2,3,4,5&quot;).
    /// </summary>
    [XmlElement("day", Form=XmlSchemaForm.Unqualified)]
    public string Day { get; set; }
    
    /// <summary> Fixed delivery from date - format YYYYMMDD, e.g. 20080213. </summary>
    [XmlElement("dateFrom", Form=XmlSchemaForm.Unqualified)]
    public int? DateFrom { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool DateFromSpecified => this.DateFrom.HasValue;
    
    /// <summary> Fixed delivery to date - format YYYYMMDD, e.g. 20080213. </summary>
    [XmlElement("dateTo", Form=XmlSchemaForm.Unqualified)]
    public int? DateTo { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool DateToSpecified => this.DateTo.HasValue;
    
    /// <summary> Time from which the consignee is available - format hhmm (local time receipient country), e.g. 1400 or 0830. </summary>
    [XmlElement("timeFrom", Form=XmlSchemaForm.Unqualified)]
    public string TimeFrom { get; set; }
    
    /// <summary> Time until the consignee is available - format hhmm (local time receipient country), e.g. 1600 or 0930. </summary>
    [XmlElement("timeTo", Form=XmlSchemaForm.Unqualified)]
    public string TimeTo { get; set; }
}

/// <summary> Bundles proactive notification data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("proactiveNotification")]
public partial class ProactiveNotification {
    
    /// <summary>
    /// Declares type of proactive notification.
    /// Possible values are:
    /// 1 = Email,
    /// 2 = Telephone,
    /// 3 = SMS,
    /// 6 = FAX,
    /// 7 = Postcard.
    /// </summary>
    [XmlElement("channel", Form=XmlSchemaForm.Unqualified)]
    public int Channel { get; set; }
    
    /// <summary>
    /// Data for proactive notification, e.g. telephone number, email address, etc.
    /// The data format for the proactive message types SMS, phone and FAX is as follows:
    /// +international country number#phone number
    /// Examples:
    /// +49#1725673423
    /// +49#01725673423
    /// </summary>
    [XmlElement("value", Form=XmlSchemaForm.Unqualified)]
    public string Value { get; set; }
    
    /// <summary>
    /// Specifies for which events a notification is to be issued.
    /// Each event has a certain integer value. By adding the different values, it is possible to build combinations of events, e.g. notification for pick-up and delivery is 5.
    /// The different values are:
    /// 1 = Pick-up,
    /// 2 = Non-delivery,
    /// 4 = Delivery,
    /// 8 = Inbound,
    /// 16 = Out for delivery.
    /// So maximum value can be 31.
    /// </summary>
    [XmlElement("rule", Form=XmlSchemaForm.Unqualified)]
    public int Rule { get; set; }
    
    /// <summary> Language of the proactive notification in ISO-3166-1 alpha-2 format (e.g. &#39;DE&#39;). </summary>
    [XmlElement("language", Form=XmlSchemaForm.Unqualified)]
    public string Language { get; set; }
}

/// <summary> Bundles notification data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("notification")]
public partial class Notification {
    
    /// <summary>
    /// Declares channel of notification.
    /// Possible values are:
    /// 1 = Email,
    /// 2 = Telephone,
    /// 3 = SMS.
    /// </summary>
    [XmlElement("channel", Form=XmlSchemaForm.Unqualified)]
    public int Channel { get; set; }
    
    /// <summary> Value for the chosen channel, i.e. the phone number or the e-mail address. </summary>
    [XmlElement("value", Form=XmlSchemaForm.Unqualified)]
    public string Value { get; set; }
    
    /// <summary> Language of the notification in ISO 3166-1 alpha-2 format (e.g. &#39;DE&#39;). </summary>
    [XmlElement("language", Form=XmlSchemaForm.Unqualified)]
    public string Language { get; set; }
}

/// <summary> Bundles parcel shop delivery data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("parcelShopDelivery")]
public partial class ParcelShopDelivery {
    
    /// <summary>
    /// Parcel shop ID for parcel shop delivery.
    /// Can be obtained from parcel shop finder. Assumes that parameter type of
    /// personal delivery is filled with a value from 3 to 5,
    /// which means parcel shop delivery. Mandatory in this case.
    /// </summary>
    [XmlElement("parcelShopId", Form=XmlSchemaForm.Unqualified)]
    public long? ParcelShopId { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool ParcelShopIdSpecified => this.ParcelShopId.HasValue;
    
    /// <summary> ID of PUDO point. For a parcel shop delivery the parcelShopId is also required. </summary>
    [XmlElement("parcelShopPudoId", Form=XmlSchemaForm.Unqualified)]
    public string ParcelShopPudoId { get; set; }
    
    /// <summary> Contains data for personal notification for parcel shop consignments. </summary>
    [XmlElement("parcelShopNotification", Form=XmlSchemaForm.Unqualified)]
    public Notification ParcelShopNotification { get; set; }
}

/// <summary> Bundles pickup data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("pickup")]
public partial class Pickup {
    
    /// <summary> Tour number (between 000 and 999). </summary>
    [XmlElement("tour", Form=XmlSchemaForm.Unqualified)]
    public int? Tour { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool TourSpecified => this.Tour.HasValue;
    
    /// <summary> Quantity of pickup parcels. Mandatory for consignment. </summary>
    [XmlElement("quantity", Form=XmlSchemaForm.Unqualified)]
    public int? Quantity { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool QuantitySpecified => this.Quantity.HasValue;
    
    /// <summary>
    /// Pickup date in consignments and collection requests. The collection day for advice customers. The from date for pickup information. Format is YYYYMMDD.
    /// It can also be used as pickup date for collection requests, then format is YYMMDD. Mandatory for consignment.
    /// </summary>
    [XmlElement("date", Form=XmlSchemaForm.Unqualified)]
    public int? Date { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool DateSpecified => this.Date.HasValue;
    
    /// <summary> From time 1 for consignments and pickup information. Format is hhmm. Mandatory for consignment and variable consignor address. </summary>
    [XmlElement("fromTime1", Form=XmlSchemaForm.Unqualified)]
    public string FromTime1 { get; set; }
    
    /// <summary> Until time 1 for consignments and pickup information. Format is hhmm. Mandatory for consignment and variable consignor address. </summary>
    [XmlElement("toTime1", Form=XmlSchemaForm.Unqualified)]
    public string ToTime1 { get; set; }
    
    /// <summary> From time 2 for consignments and pickup information. Format is hhmm. </summary>
    [XmlElement("fromTime2", Form=XmlSchemaForm.Unqualified)]
    public string FromTime2 { get; set; }
    
    /// <summary> Until time 2 for consignments and pickup information. Format is hhmm. </summary>
    [XmlElement("toTime2", Form=XmlSchemaForm.Unqualified)]
    public string ToTime2 { get; set; }
    
    /// <summary>
    /// Detemines whether an extra pickup tour is created for this shipment with express service.
    /// Possible values are:
    /// 1: Extra pickup without express service
    /// 2: Extra pickup with express service
    /// </summary>
    [XmlElement("extraPickup", Form=XmlSchemaForm.Unqualified)]
    public int? ExtraPickup { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool ExtraPickupSpecified => this.ExtraPickup.HasValue;
    
    /// <summary> The ID of the parcel box. </summary>
    [XmlElement("boxId", Form=XmlSchemaForm.Unqualified)]
    public string BoxId { get; set; }
    
    /// <summary> The TAN of the parcel box for this order. </summary>
    [XmlElement("boxTan", Form=XmlSchemaForm.Unqualified)]
    public string BoxTan { get; set; }
    
    /// <summary> Contains pickup address information for consignments and collection requests. Mandatory for consignment. </summary>
    [XmlElement("collectionRequestAddress", Form=XmlSchemaForm.Unqualified)]
    public Address CollectionRequestAddress { get; set; }
}

/// <summary> Bundles personal delivery data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("personalDelivery")]
public partial class PersonalDelivery {
    
    /// <summary>
    /// Declares type of personal delivery.
    /// Possible values are:
    /// 1 = Department delivery (without personal identification),
    /// 2 = Personal delivery with personal identification (ID-Check),
    /// 3 = Personal delivery without personal identification at drop point (e.g. parcel shop),
    /// 4 = Personal delivery with personal identification at drop point (e.g. parcel shop),
    /// 5 = Personal delivery with personal identification at drop point plus ID-Check (e.g. parcel shop).
    /// 
    /// For parcel shop delivery the parcel shop id must be declared in productAndServiceData. It can be obtained from parcel shop finder.
    /// </summary>
    [XmlElement("type", Form=XmlSchemaForm.Unqualified)]
    public int Type { get; set; }
    
    /// <summary> Floor where the personal delivery shall take place. This field is only used for department delivery. </summary>
    [XmlElement("floor", Form=XmlSchemaForm.Unqualified)]
    public string Floor { get; set; }
    
    /// <summary> Building where the personal delivery shall take place. This field is only used for department delivery (type 1). </summary>
    [XmlElement("building", Form=XmlSchemaForm.Unqualified)]
    public string Building { get; set; }
    
    /// <summary> Department where the personal delivery shall take place. This field is only used for department delivery (type 1). </summary>
    [XmlElement("department", Form=XmlSchemaForm.Unqualified)]
    public string Department { get; set; }
    
    /// <summary> Name of the person authorised to accept the consignment. This field is only used for delivery with ID-Check (types 2 and 5). </summary>
    [XmlElement("name", Form=XmlSchemaForm.Unqualified)]
    public string Name { get; set; }
    
    /// <summary> Telephone number of the person authorised to accept the consignment. This field is only used for delivery with ID-Check (types 2 and 5). </summary>
    [XmlElement("phone", Form=XmlSchemaForm.Unqualified)]
    public string Phone { get; set; }
    
    /// <summary> Personal identification number of the person authorised to accept the consignment. This field is only used for delivery with ID-Check (types 2 and 5). </summary>
    [XmlElement("personId", Form=XmlSchemaForm.Unqualified)]
    public string PersonId { get; set; }
}

/// <summary> Bundles product and service data for ShipmentService. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("productAndServiceData")]
public partial class ProductAndServiceData {
    
    /// <summary>
    /// Defines the shipment type.
    /// Possible values are:
    /// consignment,
    /// collection request order,
    /// pickup information.
    /// </summary>
    [XmlElement("orderType", Form=XmlSchemaForm.Unqualified)]
    public ProductAndServiceDataOrderType OrderType { get; set; }
    
    /// <summary> Specifies if saturday delivery is demanded. Only selectable for product &quot;E12&quot;. Default value is false. </summary>
    [XmlElement("saturdayDelivery", Form=XmlSchemaForm.Unqualified)]
    public bool? SaturdayDelivery { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool SaturdayDeliverySpecified => this.SaturdayDelivery.HasValue;
    
    /// <summary> Specifies if the recipient has to pay the consignment. Default value is false. </summary>
    [XmlElement("exWorksDelivery", Form=XmlSchemaForm.Unqualified)]
    public bool? ExWorksDelivery { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool ExWorksDeliverySpecified => this.ExWorksDelivery.HasValue;
    
    /// <summary> Set to true if an international shipment should use Guarantee, only for products CL and E18 for international parcels. </summary>
    [XmlElement("guarantee", Form=XmlSchemaForm.Unqualified)]
    public bool? Guarantee { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool GuaranteeSpecified => this.Guarantee.HasValue;
    
    /// <summary> Set to true if this consignment contains bulk tyres, only for product CL. </summary>
    [XmlElement("tyres", Form=XmlSchemaForm.Unqualified)]
    public bool? Tyres { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool TyresSpecified => this.Tyres.HasValue;
    
    /// <summary> Set to true if the parcel should deliver as product &#39;DPD Food&#39;. </summary>
    [XmlElement("food", Form=XmlSchemaForm.Unqualified)]
    public bool? Food { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool FoodSpecified => this.Food.HasValue;
    
    /// <summary> Contains information for personal delivery. </summary>
    [XmlElement("personalDelivery", Form=XmlSchemaForm.Unqualified)]
    public PersonalDelivery PersonalDelivery { get; set; }
    
    /// <summary> Contains information for pickup consignments, pickup address for collection requests or details for pickup information. </summary>
    [XmlElement("pickup", Form=XmlSchemaForm.Unqualified)]
    public Pickup Pickup { get; set; }
    
    /// <summary> Contains the necessary information, if a parcel shop delivery is intended. </summary>
    [XmlElement("parcelShopDelivery", Form=XmlSchemaForm.Unqualified)]
    public ParcelShopDelivery ParcelShopDelivery { get; set; }
    
    /// <summary> Contains data for interactive notification for consignments. The notification type &quot;phone&quot; is forbidden here. </summary>
    [XmlElement("predict", Form=XmlSchemaForm.Unqualified)]
    public Notification Predict { get; set; }
    
    /// <summary> Contains data for personal delivery notification for consignments. </summary>
    [XmlElement("personalDeliveryNotification", Form=XmlSchemaForm.Unqualified)]
    public Notification PersonalDeliveryNotification { get; set; }
    
    /// <summary> Contains information of proactive notification for consignments. </summary>
    [XmlElement("proactiveNotification", Form=XmlSchemaForm.Unqualified)]
    public ProactiveNotification[] ProactiveNotification { get; set; }
    
    /// <summary> Contains special delivery data for consignments. </summary>
    [XmlElement("delivery", Form=XmlSchemaForm.Unqualified)]
    public Delivery Delivery { get; set; }
    
    /// <summary> Contains data about invoice recipient if it differs for consignment. </summary>
    [XmlElement("invoiceAddress", Form=XmlSchemaForm.Unqualified)]
    public Address InvoiceAddress { get; set; }
    
    /// <summary> In some relations a specific service code can be set, which overwrites the feature selection. </summary>
    [XmlElement("countrySpecificService", Form=XmlSchemaForm.Unqualified)]
    public string CountrySpecificService { get; set; }
    
    /// <summary> Contains data for consignments across customs borders. </summary>
    [XmlElement("international", Form=XmlSchemaForm.Unqualified)]
    public International International { get; set; }
}

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[XmlType(AnonymousType=true, Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("productAndServiceDataOrderType")]
public enum ProductAndServiceDataOrderType {
    
    /// <remarks/>
    [XmlEnum("consignment")]
    Consignment,
    
    /// <remarks/>
    [XmlEnum("collection request order")]
    CollectionRequestOrder,
    
    /// <remarks/>
    [XmlEnum("pickup information")]
    PickupInformation,
}

/// <summary> Bundles hazardous materials data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("hazardous")]
public partial class Hazardous {
    
    /// <summary> Defines UN number of hazardous substance. UN numbers range between 0004 and 9004. </summary>
    [XmlElement("identificationUnNo", Form=XmlSchemaForm.Unqualified)]
    public string IdentificationUnNo { get; set; }
    
    /// <summary>
    /// Declares class of hazardous substance. Possible values range from 1 to 9. Subclasses are specified as position after decimal point
    /// (e.g. class 1 is &quot;explosives&quot;, class 1.6 is &quot;extremely insensitive explosives&quot;).
    /// </summary>
    [XmlElement("identificationClass", Form=XmlSchemaForm.Unqualified)]
    public string IdentificationClass { get; set; }
    
    /// <summary> Declares classification code of hazardous substance. </summary>
    [XmlElement("classificationCode", Form=XmlSchemaForm.Unqualified)]
    public string ClassificationCode { get; set; }
    
    /// <summary> Declares packing group of hazardous substance. Valid values are &quot;I&quot;, &quot;II&quot; and &quot;III&quot;. </summary>
    [XmlElement("packingGroup", Form=XmlSchemaForm.Unqualified)]
    public string PackingGroup { get; set; }
    
    /// <summary>
    /// Declares packing code.
    /// Possible values are:
    /// 0A = Thin sheet packing,
    /// 0A1 = Thin sheet packing with non removable head,
    /// 0A2 = Thin sheet packing with removable head,
    /// 1A = Steel barrel,
    /// 1A1 = Steel barrel with non removable head,
    /// 1A2 = Steel barrel with removable head,
    /// 1B = Aluminium barrel,
    /// 1B1 = Aluminium barrel with non removable head,
    /// 1B2 = Aluminium barrel with removable head,
    /// 1H = Plastics barrel,
    /// 1H1 = Plastics barrel with non removable head,
    /// 1H2 = Plastics barrel with removable head,
    /// 3A = Steel canister,
    /// 3A1 = Steel canister with non removable head,
    /// 3A2 = Steel canister with removable head,
    /// 3B = Aluminium canister,
    /// 3B1 = Aluminium canister with non removable head,
    /// 3B2 = Aluminium canister with removable head,
    /// 3H = Plastics canister,
    /// 3H1 = Plastics canister with non removable head,
    /// 3H2 = Plastics canister with removable head,
    /// 4A = Steel crates,
    /// 4B = Aluminium crate,
    /// 4D = Plywood crate,
    /// 4G = Cardboard crate,
    /// 4H = Plastics crate,
    /// 4H1 = Plastics crate plastics expanded,
    /// 4H2 = Plastics crate plastics solid,
    /// 5H = Plastics bags,
    /// 5M = Paper bags,
    /// 6H = Combination packings.
    /// </summary>
    [XmlElement("packingCode", Form=XmlSchemaForm.Unqualified)]
    public HazardousPackingCode PackingCode { get; set; }
    
    /// <summary> Description of hazardous substance (redundant). </summary>
    [XmlElement("description", Form=XmlSchemaForm.Unqualified)]
    public string Description { get; set; }
    
    /// <summary> Subsidiary risk of hazardous substance (redundant). </summary>
    [XmlElement("subsidiaryRisk", Form=XmlSchemaForm.Unqualified)]
    public string SubsidiaryRisk { get; set; }
    
    /// <summary> Tunnel restriction code of hazardous substance. Possible values are &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot; or &quot;E&quot;. </summary>
    [XmlElement("tunnelRestrictionCode", Form=XmlSchemaForm.Unqualified)]
    public HazardousTunnelRestrictionCode? TunnelRestrictionCode { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool TunnelRestrictionCodeSpecified => this.TunnelRestrictionCode.HasValue;
    
    /// <summary> Weight of hazardous substance with up to 4 pre-decimal point positions and 2 decimal digits with separator. </summary>
    [XmlElement("hazardousWeight", Form=XmlSchemaForm.Unqualified)]
    public decimal HazardousWeight { get; set; }
    
    /// <summary> Net weight of hazardous substance with up to 4 pre-decimal point positions and 2 decimal point positions. </summary>
    [XmlElement("netWeight", Form=XmlSchemaForm.Unqualified)]
    public decimal? NetWeight { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool NetWeightSpecified => this.NetWeight.HasValue;
    
    /// <summary> Factor of hazardous substance, 999 means unlimited. </summary>
    [XmlElement("factor", Form=XmlSchemaForm.Unqualified)]
    public int Factor { get; set; }
    
    /// <summary> A not otherwise specified text which is mandatory for some substances. </summary>
    [XmlElement("notOtherwiseSpecified", Form=XmlSchemaForm.Unqualified)]
    public string NotOtherwiseSpecified1 { get; set; }
}

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[XmlType(AnonymousType=true, Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("hazardousPackingCode")]
public enum HazardousPackingCode {
    
    /// <remarks/>
    [XmlEnum("0A")]
    Item0A,
    
    /// <remarks/>
    [XmlEnum("0A1")]
    Item0A1,
    
    /// <remarks/>
    [XmlEnum("0A2")]
    Item0A2,
    
    /// <remarks/>
    [XmlEnum("1A")]
    Item1A,
    
    /// <remarks/>
    [XmlEnum("1A1")]
    Item1A1,
    
    /// <remarks/>
    [XmlEnum("1A2")]
    Item1A2,
    
    /// <remarks/>
    [XmlEnum("1B")]
    Item1B,
    
    /// <remarks/>
    [XmlEnum("1B1")]
    Item1B1,
    
    /// <remarks/>
    [XmlEnum("1B2")]
    Item1B2,
    
    /// <remarks/>
    [XmlEnum("1H")]
    Item1H,
    
    /// <remarks/>
    [XmlEnum("1H1")]
    Item1H1,
    
    /// <remarks/>
    [XmlEnum("1H2")]
    Item1H2,
    
    /// <remarks/>
    [XmlEnum("3A")]
    Item3A,
    
    /// <remarks/>
    [XmlEnum("3A1")]
    Item3A1,
    
    /// <remarks/>
    [XmlEnum("3A2")]
    Item3A2,
    
    /// <remarks/>
    [XmlEnum("3B")]
    Item3B,
    
    /// <remarks/>
    [XmlEnum("3B1")]
    Item3B1,
    
    /// <remarks/>
    [XmlEnum("3B2")]
    Item3B2,
    
    /// <remarks/>
    [XmlEnum("3H")]
    Item3H,
    
    /// <remarks/>
    [XmlEnum("3H1")]
    Item3H1,
    
    /// <remarks/>
    [XmlEnum("3H2")]
    Item3H2,
    
    /// <remarks/>
    [XmlEnum("4A")]
    Item4A,
    
    /// <remarks/>
    [XmlEnum("4B")]
    Item4B,
    
    /// <remarks/>
    [XmlEnum("4D")]
    Item4D,
    
    /// <remarks/>
    [XmlEnum("4G")]
    Item4G,
    
    /// <remarks/>
    [XmlEnum("4H")]
    Item4H,
    
    /// <remarks/>
    [XmlEnum("4H1")]
    Item4H1,
    
    /// <remarks/>
    [XmlEnum("4H2")]
    Item4H2,
    
    /// <remarks/>
    [XmlEnum("5H")]
    Item5H,
    
    /// <remarks/>
    [XmlEnum("5M")]
    Item5M,
    
    /// <remarks/>
    [XmlEnum("6H")]
    Item6H,
}

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[XmlType(AnonymousType=true, Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("hazardousTunnelRestrictionCode")]
public enum HazardousTunnelRestrictionCode {
    
    /// <remarks/>
    [XmlEnum("A")]
    A,
    
    /// <remarks/>
    [XmlEnum("B")]
    B,
    
    /// <remarks/>
    [XmlEnum("C")]
    C,
    
    /// <remarks/>
    [XmlEnum("D")]
    D,
    
    /// <remarks/>
    [XmlEnum("E")]
    E,
}

/// <summary> Bundles data for higher insurance. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("higherInsurance")]
public partial class HigherInsurance {
    
    /// <summary> Increased insurance value with 2 decimal point positions without separators. </summary>
    [XmlElement("amount", Form=XmlSchemaForm.Unqualified)]
    public long Amount { get; set; }
    
    /// <summary> Currency code for increased insurance in format ISO 4217 alpha 3. </summary>
    [XmlElement("currency", Form=XmlSchemaForm.Unqualified)]
    public string Currency { get; set; }
}

/// <summary> Bundles parcel data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("parcel")]
public partial class Parcel {
    
    /// <summary> Parcel label number. Number range and validity are checked. </summary>
    [XmlElement("parcelLabelNumber", Form=XmlSchemaForm.Unqualified)]
    public string ParcelLabelNumber { get; set; }
    
    /// <summary> Parcel customer reference number 1. </summary>
    [XmlElement("customerReferenceNumber1", Form=XmlSchemaForm.Unqualified)]
    public string CustomerReferenceNumber1 { get; set; }
    
    /// <summary> Parcel customer reference number 2. </summary>
    [XmlElement("customerReferenceNumber2", Form=XmlSchemaForm.Unqualified)]
    public string CustomerReferenceNumber2 { get; set; }
    
    /// <summary> Parcel customer reference number 3. </summary>
    [XmlElement("customerReferenceNumber3", Form=XmlSchemaForm.Unqualified)]
    public string CustomerReferenceNumber3 { get; set; }
    
    /// <summary> Parcel customer reference number 4. </summary>
    [XmlElement("customerReferenceNumber4", Form=XmlSchemaForm.Unqualified)]
    public string CustomerReferenceNumber4 { get; set; }
    
    /// <summary> Specifies if this parcel is a consignment swap parcel. Default value is false. </summary>
    [XmlElement("swap", Form=XmlSchemaForm.Unqualified)]
    public bool? Swap { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool SwapSpecified => this.Swap.HasValue;
    
    /// <summary> Volume of the single parcel (length/width/height in format LLLWWWHHH) in cm without separators. </summary>
    [XmlElement("volume", Form=XmlSchemaForm.Unqualified)]
    public int? Volume { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool VolumeSpecified => this.Volume.HasValue;
    
    /// <summary>
    /// Parcel weight in grams rounded in 10 gram units without decimal point (e.g. 300 equals 3kg).
    /// Consignment allows 8-digit values, collection requests 7-digit and dangerous goods 6-digit.
    /// </summary>
    [XmlElement("weight", Form=XmlSchemaForm.Unqualified)]
    public int? Weight { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool WeightSpecified => this.Weight.HasValue;
    
    /// <summary> Specifies if this parcel is a limited quantities hazardous goods parcel. Default value is false. </summary>
    [XmlElement("hazardousLimitedQuantities", Form=XmlSchemaForm.Unqualified)]
    public bool? HazardousLimitedQuantities { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool HazardousLimitedQuantitiesSpecified => this.HazardousLimitedQuantities.HasValue;
    
    /// <summary> Specifies if this parcel has increased insurance value. Default value is false. </summary>
    [XmlElement("higherInsurance", Form=XmlSchemaForm.Unqualified)]
    public HigherInsurance HigherInsurance { get; set; }
    
    /// <summary>
    /// Content of this parcel, mandatory for increased insurance.
    /// For collection requests maximum length is 50, for consignment it is 35.
    /// </summary>
    [XmlElement("content", Form=XmlSchemaForm.Unqualified)]
    public string Content { get; set; }
    
    /// <summary>
    /// Additional service.
    /// Possible values are:
    /// 1 = Delivery information,
    /// 2 = Documents return,
    /// 3 = Written permission to deposit goods by sender.
    /// </summary>
    [XmlElement("addService", Form=XmlSchemaForm.Unqualified)]
    public int? AddService { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool AddServiceSpecified => this.AddService.HasValue;
    
    /// <summary> Message number for consignment shipper information. Default value is 1. </summary>
    [XmlElement("messageNumber", Form=XmlSchemaForm.Unqualified)]
    public int? MessageNumber { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool MessageNumberSpecified => this.MessageNumber.HasValue;
    
    /// <summary>
    /// Blockable functions.
    /// Possible values are:
    /// LOCKDZB = Delivery to a third party with notification of delivery,
    /// LOCKASG = Written permission to deposit goods,
    /// LOCKEVM = Delivery with non-recurring authority,
    /// LOCKSHOP = Parcel shop,
    /// LOCKTV = Appointment.
    /// </summary>
    [XmlElement("function", Form=XmlSchemaForm.Unqualified)]
    public ParcelFunction? Function { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool FunctionSpecified => this.Function.HasValue;
    
    /// <summary> Free text for blockable functions. </summary>
    [XmlElement("parameter", Form=XmlSchemaForm.Unqualified)]
    public string Parameter { get; set; }
    
    /// <summary> Contains packing and substance data for dangerous goods. </summary>
    [XmlElement("hazardous", Form=XmlSchemaForm.Unqualified)]
    public Hazardous[] Hazardous { get; set; }
    
    /// <summary> Flag for determining if content of parameter info1 will be added on the label of a collection request parcel. Default value is false. </summary>
    [XmlElement("printInfo1OnParcelLabel", Form=XmlSchemaForm.Unqualified)]
    public bool? PrintInfo1OnParcelLabel { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool PrintInfo1OnParcelLabelSpecified => this.PrintInfo1OnParcelLabel.HasValue;
    
    /// <summary> Information text 1. This will be printed on the parcel label if the flag printInfo1OnParcellabel is set to true. </summary>
    [XmlElement("info1", Form=XmlSchemaForm.Unqualified)]
    public string Info1 { get; set; }
    
    /// <summary> Information text 2. This will not be printed on the parcel label. </summary>
    [XmlElement("info2", Form=XmlSchemaForm.Unqualified)]
    public string Info2 { get; set; }
    
    /// <summary>
    /// Specifies if parcel is a return parcel.
    /// The return parcel must always be next in order to the corresponding outbound parcel. Default value is false.
    /// </summary>
    [XmlElement("returns", Form=XmlSchemaForm.Unqualified)]
    public bool? Returns { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool ReturnsSpecified => this.Returns.HasValue;
    
    /// <summary> Parcel class. See Parcelclass in MPSEXPDATA specification for valid values. </summary>
    [XmlElement("parcelClass", Form=XmlSchemaForm.Unqualified)]
    public string ParcelClass { get; set; }
}

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[XmlType(AnonymousType=true, Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("parcelFunction")]
public enum ParcelFunction {
    
    /// <remarks/>
    [XmlEnum("LOCKDZB")]
    LOCKDZB,
    
    /// <remarks/>
    [XmlEnum("LOCKASG")]
    LOCKASG,
    
    /// <remarks/>
    [XmlEnum("LOCKEVM")]
    LOCKEVM,
    
    /// <remarks/>
    [XmlEnum("LOCKSHOP")]
    LOCKSHOP,
    
    /// <remarks/>
    [XmlEnum("LOCKTV")]
    LOCKTV,
    
    /// <remarks/>
    [XmlEnum("LOCKZBK")]
    LOCKZBK,
}

/// <summary> Bundles general shipment data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("generalShipmentData")]
public partial class GeneralShipmentData {
    
    /// <summary>
    /// The shipment number for consignment data.
    /// The shipment number is only accepted if the parcel label number is allocated by customer.
    /// It starts with one of &quot;MPS&quot;, &quot;EXP&quot; or &quot;B2C&quot;, the last eight ciphers are the date in format yyyyMMdd.
    /// </summary>
    [XmlElement("mpsId", Form=XmlSchemaForm.Unqualified)]
    public string MpsId { get; set; }
    
    /// <summary> User ID of the person who made the entry. </summary>
    [XmlElement("cUser", Form=XmlSchemaForm.Unqualified)]
    public string CUser { get; set; }
    
    /// <summary> Consignment customer reference number 1 (maximal length 35), also customer reference number for collection request orders (maximal length 50). </summary>
    [XmlElement("mpsCustomerReferenceNumber1", Form=XmlSchemaForm.Unqualified)]
    public string MpsCustomerReferenceNumber1 { get; set; }
    
    /// <summary> Consignment customer reference number 2. </summary>
    [XmlElement("mpsCustomerReferenceNumber2", Form=XmlSchemaForm.Unqualified)]
    public string MpsCustomerReferenceNumber2 { get; set; }
    
    /// <summary> Consignment customer reference number 3. </summary>
    [XmlElement("mpsCustomerReferenceNumber3", Form=XmlSchemaForm.Unqualified)]
    public string MpsCustomerReferenceNumber3 { get; set; }
    
    /// <summary> Consignment customer reference number 4. </summary>
    [XmlElement("mpsCustomerReferenceNumber4", Form=XmlSchemaForm.Unqualified)]
    public string MpsCustomerReferenceNumber4 { get; set; }
    
    /// <summary> Serves as unique alphanumeric key of the shipment used by customer. </summary>
    [XmlElement("identificationNumber", Form=XmlSchemaForm.Unqualified)]
    public string IdentificationNumber { get; set; }
    
    /// <summary>
    /// Sending depot for consignment, ordering depot for collection request, customer&#39;s depot for pickup information or creating/sending depot for dangerous goods.
    /// Four alphanumeric positions, including leading zeros, e.g. 0163.
    /// </summary>
    [XmlElement("sendingDepot", Form=XmlSchemaForm.Unqualified)]
    public string SendingDepot { get; set; }
    
    /// <summary>
    /// Selection of product, exactly one per shipment, mandatory for consignment data. Possible values are:
    /// CL = DPD CLASSIC
    /// E830 = DPD 8:30
    /// E10 = DPD 10:00
    /// E12 = DPD 12:00
    /// E18 = DPD 18:00
    /// IE2 = DPD EXPRESS
    /// MAIL = DPD International Mail
    /// MAX = DPD MAX
    /// PL = DPD PARCELLetter
    /// PL+ = DPD PARCELLetterPlus
    /// PM4 = DPD Priority
    /// </summary>
    [XmlElement("product", Form=XmlSchemaForm.Unqualified)]
    public GeneralShipmentDataProduct Product { get; set; }
    
    /// <summary> Specifies if this shipment should be sent as complete delivery. Mandatory for COD. Default value is false. </summary>
    [XmlElement("mpsCompleteDelivery", Form=XmlSchemaForm.Unqualified)]
    public bool? MpsCompleteDelivery { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool MpsCompleteDeliverySpecified => this.MpsCompleteDelivery.HasValue;
    
    /// <summary> Specifies if the label for complete delivery is printed for pickup. Mandatory for COD. Default value is false. </summary>
    [XmlElement("mpsCompleteDeliveryLabel", Form=XmlSchemaForm.Unqualified)]
    public bool? MpsCompleteDeliveryLabel { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool MpsCompleteDeliveryLabelSpecified => this.MpsCompleteDeliveryLabel.HasValue;
    
    /// <summary> Volume per consignment in cm3 (without positions after the decimal point). </summary>
    [XmlElement("mpsVolume", Form=XmlSchemaForm.Unqualified)]
    public int? MpsVolume { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool MpsVolumeSpecified => this.MpsVolume.HasValue;
    
    /// <summary> Shipment weight in grams rounded in 10 gram units without decimal point (e.g. 300 equals 3kg). </summary>
    [XmlElement("mpsWeight", Form=XmlSchemaForm.Unqualified)]
    public int? MpsWeight { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool MpsWeightSpecified => this.MpsWeight.HasValue;
    
    /// <summary> Date when the shipment is expected to be transferred to the system. Format is YYYYMMDD. </summary>
    [XmlElement("mpsExpectedSendingDate", Form=XmlSchemaForm.Unqualified)]
    public string MpsExpectedSendingDate { get; set; }
    
    /// <summary> Time when the shipment is expected to be transferred to the system. Format is HHMMSS. </summary>
    [XmlElement("mpsExpectedSendingTime", Form=XmlSchemaForm.Unqualified)]
    public string MpsExpectedSendingTime { get; set; }
    
    /// <summary> Consignment sender&#39;s address, collection request customer&#39;s address or pickup information customer&#39;s address. </summary>
    [XmlElement("sender", Form=XmlSchemaForm.Unqualified)]
    public AddressWithType Sender { get; set; }
    
    /// <summary> Address of the recipient. For parcel shop delivery address of the real recipient. </summary>
    [XmlElement("recipient", Form=XmlSchemaForm.Unqualified)]
    public AddressWithType Recipient { get; set; }
    
    /// <summary> Address of the return parcel. It is currently not used. </summary>
    [XmlElement("returnAddress", Form=XmlSchemaForm.Unqualified)]
    public AddressWithType ReturnAddress { get; set; }
}

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[XmlType(AnonymousType=true, Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("generalShipmentDataProduct")]
public enum GeneralShipmentDataProduct {
    
    /// <remarks/>
    [XmlEnum("CL")]
    CL,
    
    /// <remarks/>
    [XmlEnum("E830")]
    E830,
    
    /// <remarks/>
    [XmlEnum("E10")]
    E10,
    
    /// <remarks/>
    [XmlEnum("E12")]
    E12,
    
    /// <remarks/>
    [XmlEnum("E18")]
    E18,
    
    /// <remarks/>
    [XmlEnum("IE2")]
    IE2,
    
    /// <remarks/>
    [XmlEnum("MAIL")]
    MAIL,
    
    /// <remarks/>
    [XmlEnum("MAX")]
    MAX,
    
    /// <remarks/>
    [XmlEnum("PL")]
    PL,
    
    /// <remarks/>
    [XmlEnum("PM4")]
    PM4,
}

/// <summary> Bundles shipment service data. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("shipmentServiceData")]
public partial class ShipmentServiceData {
    
    /// <summary> Contains general data for a shipment. </summary>
    [XmlElement("generalShipmentData", Form=XmlSchemaForm.Unqualified)]
    public GeneralShipmentData GeneralShipmentData { get; set; }
    
    /// <summary> Contains information for the parcels. </summary>
    [XmlElement("parcels", Form=XmlSchemaForm.Unqualified)]
    public Parcel[] Parcels { get; set; }
    
    /// <summary> Contains special data for a shipment. </summary>
    [XmlElement("productAndServiceData", Form=XmlSchemaForm.Unqualified)]
    public ProductAndServiceData ProductAndServiceData { get; set; }
}

/// <summary> Information about the printer, if direct printing is used. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("printer")]
public partial class Printer {
    
    /// <summary> The printer&#39;s manufacturer. At the moment only for informational purposes. </summary>
    [XmlElement("manufacturer", Form=XmlSchemaForm.Unqualified)]
    public string Manufacturer { get; set; }
    
    /// <summary> The printer&#39;s model. At the moment only for informational purposes. </summary>
    [XmlElement("model", Form=XmlSchemaForm.Unqualified)]
    public string Model { get; set; }
    
    /// <summary> The printer&#39;s revision / version. At the moment only for informational purposes. </summary>
    [XmlElement("revision", Form=XmlSchemaForm.Unqualified)]
    public string Revision { get; set; }
    
    /// <summary> The horizontal offset in mm for the direct printer file (Not used with normal PDF output). </summary>
    [XmlElement("offsetX", Form=XmlSchemaForm.Unqualified)]
    public decimal OffsetX { get; set; }
    
    /// <summary> The vertical offset in mm for the direct printer file (Not used with normal PDF output). </summary>
    [XmlElement("offsetY", Form=XmlSchemaForm.Unqualified)]
    public decimal OffsetY { get; set; }
    
    /// <summary> The connection type of the printer: serial or parallel connection. </summary>
    [XmlElement("connectionType", Form=XmlSchemaForm.Unqualified)]
    public PrinterConnectionType ConnectionType { get; set; }
    
    /// <summary> If the printer can print AZTEC barcodes, set this flag to true. </summary>
    [XmlElement("barcodeCapable2D", Form=XmlSchemaForm.Unqualified)]
    public bool BarcodeCapable2D { get; set; }
}

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[XmlType(AnonymousType=true, Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("printerConnectionType")]
public enum PrinterConnectionType {
    
    /// <remarks/>
    [XmlEnum("SERIAL")]
    SERIAL,
    
    /// <remarks/>
    [XmlEnum("PARALLEL")]
    PARALLEL,
}

/// <summary> Options how to return the parcel labels </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("printOption")]
public partial class PrintOption {
    
    /// <summary>
    /// The format in which the parcel labels should be returned.
    /// PDF, BARCODE_IMAGE, MULTIPAGE_IMAGE as file output; DPL, PDL, ZPL for direct printing.
    /// In any case the output is base64 encoded.
    /// </summary>
    [XmlElement("outputFormat", Form=XmlSchemaForm.Unqualified)]
    public OutputFormatType OutputFormat { get; set; }
    
    /// <summary>
    /// Declares the paper format for parcel label print, either &quot;A4&quot;, &quot;A6&quot; or &quot;A7&quot;.
    /// For direct printing must be set to &quot;A6&quot;. &quot;A7&quot; only prints return labels.
    /// </summary>
    [XmlElement("paperFormat", Form=XmlSchemaForm.Unqualified)]
    public PrintOptionPaperFormat? PaperFormat { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool PaperFormatSpecified => this.PaperFormat.HasValue;
    
    /// <summary> Information about the printer, if direct printing is enabled. </summary>
    [XmlElement("printer", Form=XmlSchemaForm.Unqualified)]
    public Printer Printer { get; set; }
    
    /// <summary> The start position of the first parcellabel on the first page, if page format A4 is chosen. Ignored on other paperformats </summary>
    [XmlElement("startPosition", Form=XmlSchemaForm.Unqualified)]
    public StartPosition? StartPosition { get; set; }
    
    /// <remarks/>
    [XmlIgnore]
    public bool StartPositionSpecified => this.StartPosition.HasValue;
}

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[XmlType(AnonymousType=true, Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("printOptionPaperFormat")]
public enum PrintOptionPaperFormat {
    
    /// <remarks/>
    [XmlEnum("A4")]
    A4,
    
    /// <remarks/>
    [XmlEnum("A6")]
    A6,
    
    /// <remarks/>
    [XmlEnum("A7")]
    A7,
}

/// <summary> Start positions </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("startPosition")]
public enum StartPosition {
    
    /// <summary> Print first label in the upper left of the A4 sheet. </summary>
    [XmlEnum("UPPER_LEFT")]
    UPPER_LEFT,
    
    /// <summary> Print first label in the upper right of the A4 sheet. </summary>
    [XmlEnum("UPPER_RIGHT")]
    UPPER_RIGHT,
    
    /// <summary> Print first label in the lower left of the A4 sheet. </summary>
    [XmlEnum("LOWER_LEFT")]
    LOWER_LEFT,
    
    /// <summary> Print first label in the lower right of the A4 sheet. </summary>
    [XmlEnum("LOWER_RIGHT")]
    LOWER_RIGHT,
}

/// <summary> Options how to return the parcel labels </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("printOptions")]
public partial class PrintOptions {
    
    public PrintOptions() {
        this.SplitByParcel = false;
    }
    
    /// <summary>
    /// The formats in which the parcel labels should be returned.
    ///  If more than one format is set, the option splitByParcel is set implicitly.
    /// </summary>
    [XmlElement("printOption", Form=XmlSchemaForm.Unqualified)]
    public PrintOption[] PrintOption { get; set; }
    
    /// <remarks/>
    [XmlElement(Form=XmlSchemaForm.Unqualified)]
    [DefaultValue(false)]
    public bool SplitByParcel { get; set; }
}

/// <summary> Stores up to 30 shipments and creates corresponding shipment documents. </summary>
[GeneratedCode("wsdl", "4.8.3928.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://dpd.com/common/service/types/ShipmentService/4.4")]
[XmlRoot("storeOrders")]
public partial class StoreOrders {
    
    /// <summary> The Options which should be used for parcel printing. </summary>
    [XmlElement("printOptions", Form=XmlSchemaForm.Unqualified)]
    public PrintOptions PrintOptions { get; set; }
    
    /// <summary> Contains the whole data for the shipments. </summary>
    [XmlElement("order", Form=XmlSchemaForm.Unqualified)]
    public ShipmentServiceData[] Order { get; set; }
}

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
public delegate void storeOrdersCompletedEventHandler(object sender, StoreOrdersCompletedEventArgs e);

/// <remarks/>
[GeneratedCode("wsdl", "4.8.3928.0")]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlRoot("storeOrdersCompletedEventArgs")]
public partial class StoreOrdersCompletedEventArgs : AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal StoreOrdersCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public StoreOrdersResponse Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((StoreOrdersResponse)(this.results[0]));
        }
    }
}
